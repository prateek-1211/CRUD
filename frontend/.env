# Program.cs
# using Microsoft.EntityFrameworkCore;

# var builder = WebApplication.CreateBuilder(args);

# // âœ… CORS Enable Karo
# builder.Services.AddCors(options =>
# {
#     options.AddPolicy("AllowAllOrigins",
#         builder => builder.AllowAnyOrigin()
#                           .AllowAnyMethod()
#                           .AllowAnyHeader());
# });

# // âœ… Database Setup
# builder.Services.AddDbContext<ApplicationDbContext>(options =>
#     options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

# builder.Services.AddControllers();

# var app = builder.Build();

# app.UseHttpsRedirection();

# // âœ… CORS Middleware Add Karo (yahan hona zaroori hai)
# app.UseCors("AllowAllOrigins");

# app.UseAuthorization();
# app.MapControllers();
# app.Run();

# var builder = WebApplication.CreateBuilder(args);

# // Add services to the container.
# builder.Services.AddCors(options =>
# {
#     options.AddPolicy("AllowAll",
#         builder =>
#         {
#             builder.AllowAnyOrigin()
#                    .AllowAnyMethod()
#                    .AllowAnyHeader();
#         });
# });

# builder.Services.AddAuthorization();  // ðŸ‘ˆ Ye line add karo

# var app = builder.Build();

# if (app.Environment.IsDevelopment())
# {
#     app.UseDeveloperExceptionPage();
# }

# // var app = builder.Build();


# app.UseHttpsRedirection();


# // Use CORS before any other middleware
# app.UseCors("AllowAll");

# app.UseAuthorization();
# app.UseRouting();
# app.UseAuthentication(); // ðŸ‘ˆ Authentication bhi add karna padega

# app.MapControllers();

# app.Run();

# Startup.cs

# using Microsoft.AspNetCore.Builder;
# using Microsoft.AspNetCore.Hosting;
# using Microsoft.Extensions.DependencyInjection;
# using Microsoft.Extensions.Hosting;

# namespace YourNamespace
# {
#     public class Startup
#     {
#         public void ConfigureServices(IServiceCollection services)
#         {
#             services.AddControllers();
#             services.AddAuthorization();
#         }

#         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
#         {
#             if (env.IsDevelopment())
#             {
#                 app.UseDeveloperExceptionPage();
#             }

#             app.UseRouting();
#             app.UseAuthorization();
#             app.UseEndpoints(endpoints =>
#             {
#                 endpoints.MapControllers();
#             });
#         }
#     }
# }

# import React, { useState } from "react";
# import { createBusiness } from "../services/apiService";

# const BusinessForm = ({ onBusinessAdded }) => {
#   const [business, setBusiness] = useState({
#     name: "",
#     category: "",
#     address: "",
#     city: "",
#     state: "",
#     zipCode: "",
#     phoneNumber: "",
#     website: "",
#     rating: "",
#   });

#   const handleChange = (e) => {
#     const { name, value } = e.target;
#     setBusiness({ ...business, [name]: value });
#   };

#   const handleSubmit = async (e) => {
#     e.preventDefault();
#     try {
#       await createBusiness(business);
#       alert("Business added successfully!");
#       setBusiness({
#         name: "",
#         category: "",
#         address: "",
#         city: "",
#         state: "",
#         zipCode: "",
#         phoneNumber: "",
#         website: "",
#         rating: "",
#       });
#       onBusinessAdded(); // Refresh list
#     } catch (error) {
#       alert("Error adding business. Please try again.");
#     }
#   };

#   return (
#     <div>
#       <h2>Add New Business</h2>
#       <form onSubmit={handleSubmit}>
#         <input type="text" name="name" placeholder="Business Name" required onChange={handleChange} value={business.name} />
#         <input type="text" name="category" placeholder="Category" required onChange={handleChange} value={business.category} />
#         <input type="text" name="address" placeholder="Address" required onChange={handleChange} value={business.address} />
#         <input type="text" name="city" placeholder="City" required onChange={handleChange} value={business.city} />
#         <input type="text" name="state" placeholder="State" required onChange={handleChange} value={business.state} />
#         <input type="text" name="zipCode" placeholder="Zip Code" required onChange={handleChange} value={business.zipCode} />
#         <input type="tel" name="phoneNumber" placeholder="Phone Number" required onChange={handleChange} value={business.phoneNumber} />
#         <input type="url" name="website" placeholder="Website" onChange={handleChange} value={business.website} />
#         <input type="number" name="rating" placeholder="Rating (0-5)" min="0" max="5" step="0.1" onChange={handleChange} value={business.rating} />
#         <button type="submit">Save Business</button>
#       </form>
#     </div>
#   );
# };

# export default BusinessForm;
